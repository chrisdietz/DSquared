@model D_Squared.Web.Models.RedbookEntryBaseViewModel

@section Scripts{
    <script src="~/App_Scripts/Redbook/EntryInit.js" type="text/javascript"></script>
    <script src="~/App_Scripts/Redbook/CreateInit.js" type="text/javascript"></script>
}
@{ 
    string employeeName = $"{@Model.EmployeeInfo.FirstName} {@Model.EmployeeInfo.LastName}";
}
<div class="jumbotron" style="background-image: url('/Content/images/lightwood-bg.jpg'); padding-bottom:5px; padding-top:20px; margin-bottom:10px">
    <div class="row">
        <div class="col-md-4">
            <div style="max-width:500px; display: block; margin: 0 auto;float:left;">
                <img src="~/Content/images/millers_d2_logo.png" style="max-width:300px;" />
            </div>
        </div>
        <div class="col-md-4">
            <div class="text-center" style="display: block; margin: 0 auto; max-width:500px">
                <h2>Redbook</h2>
                <p class="lead">
                    Restaurant: <strong><u>@Model.EmployeeInfo.StoreNumber</u></strong>
                </p>
            </div>
        </div>
        <div class="col-md-4">
            <div class="text-center" style="display: block; margin: 0 auto; max-width:500px">
                <p class="lead">
                    Time: @DateTime.Now.ToLocalTime().ToString()
                    <br />
                    Employee: @Model.EmployeeInfo.FirstName @Model.EmployeeInfo.LastName
                </p>
            </div>
        </div>
    </div>
</div>
<hr />

@using (Html.BeginForm("Entry", "Redbook", FormMethod.Post, htmlAttributes: new { @id = "entryForm" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.SelectedLocation)
    @Html.HiddenFor(model => model.RedbookEntry.Id)
    <input id="hiddenRefresh" type="hidden">

    <div class="row">
        <div class="col-md-12">
            <a data-toggle="modal" href="#helpModal" class="btn btn-dsquared btn-sm" style="float:right; margin-left: 10px;"><i class="fa fa-question-circle" aria-hidden="true"></i></a>
        </div>
        <br />
        <br />
    </div>

    <div class="row">
        <div class="col-md-3">
            <div class="panel panel-default firstRowPanel">
                <div class="panel-heading lead" style="margin-bottom: 0px">
                    Record Selection
                </div>
                <div class="panel-body">
                    <div class="col-md-8">
                        <div class="form-group">
                            @Html.LabelFor(model => model.SelectedDateString, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.SelectedDateString, new { htmlAttributes = new { @class = "refreshOnChange form-control date-picker", onkeydown = "return false", onpaste = "return false" } })
                        </div>
                        <div class="form-group">
                            <span onclick="GetLastYearRedbookEntryDetail(@Model.RedbookEntry.Id)">
                                <a class="btn btn-dsquared" style="margin-top: 4px">View Last Year Redbook</a>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-5">
            <div class="panel panel-default firstRowPanel">
                <div class="panel-heading lead" style="margin-bottom: 0px">
                    Sales Data
                </div>
                <div>
                    <dl class="dl-horizontal" style="margin-left: 60px;margin-bottom: 0px">
                        <dt>
                            @Html.DisplayNameFor(model => model.SalesDataDTO.DateOfEntry)
                        </dt>
                        <dd>
                            @Model.SalesDataDTO.DateOfEntry.ToShortDateString()
                        </dd>
                    </dl>
                </div>
                <div class="panel-body panel-default col-md-5">
                    <dl class="dl-horizontal" style="margin-bottom: 0">
                        <dt>
                            @Html.DisplayNameFor(model => model.SalesForecastDTO.ForecastAmount)
                        </dt>
                        <dd>
                            @Model.SalesForecastDTO.ForecastAmount.ToString("C0")
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.SalesForecastDTO.PriorYearSales)
                        </dt>
                        <dd>
                            @Model.SalesForecastDTO.PriorYearSales.ToString("C0")
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.SalesForecastDTO.Prior2YearSales)
                        </dt>
                        <dd>
                            @Model.SalesForecastDTO.Prior2YearSales.ToString("C0")
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.SalesForecastDTO.AverageSalesPerMonth)
                        </dt>
                        <dd>
                            @Model.SalesForecastDTO.AverageSalesPerMonth.ToString("C0")
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.SalesForecastDTO.LaborForecast)
                        </dt>
                        <dd>
                            @Model.SalesForecastDTO.LaborForecast.ToString("C0")
                        </dd>
                    </dl>

                    <div class="form-group">
                        <span onclick="GetSalesForecastDetail('@Model.SelectedDateString', '@Model.RedbookEntry.LocationId')" style="float:left">
                            <a class="btn btn-xs btn-dsquared">More Details</a>
                        </span>
                    </div>
                </div>
                <div class="panel-body panel-default col-md-7">
                    <dl class="dl-horizontal" style="margin-bottom: 0">
                        <dt>
                            @Html.DisplayNameFor(model => model.SalesDataDTO.Sales)
                        </dt>
                        <dd>
                            @Model.SalesDataDTO.Sales.ToString("C0")
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.SalesDataDTO.Discounts)
                        </dt>
                        <dd>
                            @Model.SalesDataDTO.Discounts.ToString("C0")
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.SalesDataDTO.Checks)
                        </dt>
                        <dd>
                            @Model.SalesDataDTO.Checks
                        </dd>
                        <dt>&nbsp;</dt>
                        <dd>&nbsp;</dd>
                        <dt>&nbsp;</dt>
                        <dd>&nbsp;</dd>
                    </dl>
                    <div class="form-group">
                        <span onclick="GetRedbookSalesData('@Model.RedbookEntry.Id')" style="float:right">
                            <a class="btn btn-xs btn-dsquared">Sales Details</a>
                        </span>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="panel panel-default firstRowPanel">
                <div class="panel-heading lead" style="margin-bottom:0px">
                    Shift Summary
                </div>
                <div class="panel-body">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ManagerSelectListAM, htmlAttributes: new { @class = "control-label" })
                            @Html.CustomDropDownListFor(model => model.RedbookEntry.ManagerOnDutyAM, Model.ManagerSelectListAM, htmlAttributes: new { @class = "managerSelect form-control select2-single select2-hidden-accessible" }, disabled: Model.RedbookEntry.IsReadOnly)
                            @Html.ValidationMessageFor(model => model.RedbookEntry.ManagerOnDutyAM, string.Empty, new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.ManagerSelectListPM, htmlAttributes: new { @class = "control-label" })
                            @Html.CustomDropDownListFor(model => model.RedbookEntry.ManagerOnDutyPM, Model.ManagerSelectListPM, htmlAttributes: new { @class = "managerSelect form-control select2-single select2-hidden-accessible" }, disabled: Model.RedbookEntry.IsReadOnly)
                            @Html.ValidationMessageFor(model => model.RedbookEntry.ManagerOnDutyPM, string.Empty, new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.WeatherSelectListAM, htmlAttributes: new { @class = "control-label" })
                            @Html.CustomDropDownListFor(model => model.RedbookEntry.SelectedWeatherAM, Model.WeatherSelectListAM, htmlAttributes: new { @class = "weatherSelect form-control select2-single select2-hidden-accessible" }, disabled: Model.RedbookEntry.IsReadOnly)
                            @Html.ValidationMessageFor(model => model.RedbookEntry.SelectedWeatherAM, string.Empty, new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.WeatherSelectListPM, htmlAttributes: new { @class = "control-label" })
                            @Html.CustomDropDownListFor(model => model.RedbookEntry.SelectedWeatherPM, Model.WeatherSelectListPM, htmlAttributes: new { @class = "weatherSelect form-control select2-single select2-hidden-accessible" }, disabled: Model.RedbookEntry.IsReadOnly)
                            @Html.ValidationMessageFor(model => model.RedbookEntry.SelectedWeatherPM, string.Empty, new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <div class="panel panel-default">
                <div class="panel-heading lead" style="margin-bottom: 0px">
                    Daily Records
                </div>
                <div class="panel-body">
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.RedbookEntry.DailyNotes, htmlAttributes: new { @class = "control-label" })
                            @Html.CustomTextAreaFor(model => model.RedbookEntry.DailyNotes, htmlAttributes: new { @class = "form-control", @style = "max-width: inherit;" }, disabled: Model.RedbookEntry.IsReadOnly)
                            @Html.ValidationMessageFor(model => model.RedbookEntry.DailyNotes, string.Empty, new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.RedbookEntry.ToDoToday, htmlAttributes: new { @class = "control-label" })
                            @Html.CustomTextAreaFor(model => model.RedbookEntry.ToDoToday, htmlAttributes: new { @class = "form-control", @style = "max-width: inherit;" }, disabled: Model.RedbookEntry.IsReadOnly)
                            @Html.ValidationMessageFor(model => model.RedbookEntry.ToDoToday, string.Empty, new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.RedbookEntry.LSMActivities, htmlAttributes: new { @class = "control-label" })
                            @Html.CustomTextAreaFor(model => model.RedbookEntry.LSMActivities, htmlAttributes: new { @class = "form-control", @style = "max-width: inherit;" }, disabled: Model.RedbookEntry.IsReadOnly)
                            @Html.ValidationMessageFor(model => model.RedbookEntry.LSMActivities, string.Empty, new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.RedbookEntry.FoodAndBeverage, htmlAttributes: new { @class = "control-label" })
                            @Html.CustomTextAreaFor(model => model.RedbookEntry.FoodAndBeverage, htmlAttributes: new { @class = "form-control", @style = "max-width: inherit;" }, disabled: Model.RedbookEntry.IsReadOnly)
                            @Html.ValidationMessageFor(model => model.RedbookEntry.FoodAndBeverage, string.Empty, new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.RedbookEntry.MPower, htmlAttributes: new { @class = "control-label" })
                            @Html.CustomTextAreaFor(model => model.RedbookEntry.MPower, htmlAttributes: new { @class = "form-control", @style = "max-width: inherit;" }, disabled: Model.RedbookEntry.IsReadOnly)
                            @Html.ValidationMessageFor(model => model.RedbookEntry.MPower, string.Empty, new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.RedbookEntry.RMIssues, htmlAttributes: new { @class = "control-label" })
                            @Html.CustomTextAreaFor(model => model.RedbookEntry.RMIssues, htmlAttributes: new { @class = "form-control", @style = "max-width: inherit;" }, disabled: Model.RedbookEntry.IsReadOnly)
                            @Html.ValidationMessageFor(model => model.RedbookEntry.RMIssues, string.Empty, new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.RedbookEntry.EmployeeNotes, htmlAttributes: new { @class = "control-label" })
                            @Html.CustomTextAreaFor(model => model.RedbookEntry.EmployeeNotes, htmlAttributes: new { @class = "form-control", @style = "max-width: inherit;" }, disabled: Model.RedbookEntry.IsReadOnly)
                            @Html.ValidationMessageFor(model => model.RedbookEntry.EmployeeNotes, string.Empty, new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>
    <div class="row">
        <div class="col-md-8">
            <div class="panel panel-default thirdRowPanel">
                <div class="panel-heading lead" style="margin-bottom:0px;">
                    @if (Model.RedbookEntry.IsReadOnly)
                    {
                        <a class="btn btn-success btn-xs" style="float:right" data-toggle="modal" disabled="disabled">Create</a>
                    }
                    else
                    {
                        <a class="btn btn-success btn-xs" style="float:right" data-toggle="modal" onclick="CreateCompetitiveEventModal(@Model.RedbookEntry.Id)">Create</a>
                    }

                    Competitive Events
                </div>
                <div class="panel-body" style="overflow-y: scroll; height: 225px">
                    @Html.Partial("~/Views/Redbook/_CompetitiveEventList.cshtml", Model.CompetitiveEventListViewModel)
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="panel panel-default thirdRowPanel">
                <div class="panel-heading lead" style="margin-bottom:0px;">
                    Events Affecting Sales
                </div>
                <div class="panel-body" style="overflow-y: scroll; height: 225px">
                    @for (int i = 0; i < Model.EventDTOs.Count(); i++)
                    {
                        @Html.HiddenFor(model => model.EventDTOs[i].Event)
                        <div class="form-check">
                            @Html.CustomCheckBoxFor(model => model.EventDTOs[i].IsChecked, new { @class = "form-check-input" }, Model.RedbookEntry.IsReadOnly)
                            <label class="form-check-label" for="RedbookEntryBaseViewModel.EventDTOs[@i].IsChecked">
                                @Model.EventDTOs[i].Event
                            </label>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    //submit and save
    <div class="row text-center">
        @if (!Model.RedbookEntry.IsReadOnly)
        {
            //only show submit/save buttons if IsReadOnly == false
            <div class="col-md-12">
                <a data-toggle="modal" href="#PCISubModuleSaveModal" class="btn btn-dsquared btn-lg">Save Changes</a>
                <a data-toggle="modal" href="#PCISubModuleSubmitModal" class="btn btn-dsquared btn-lg">Save and Email RM</a>
            </div>
        }
    </div>

    // PCI Sub-module Save modal
    <div class="modal fade" id="PCISubModuleSaveModal" tabindex="-1" role="dialog" aria-labelledby="PCISubModuleSaveModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title">@employeeName, Please validate that you have inspected all of your restaurants installed EMV readers for Restaurant: @Model.SelectedLocation</h4>
                </div>
                <div class="modal-body" style="font-size:18px">
                    @for (int i = 0; i < Model.Questions.Count(); i++)
                    {
                        @Html.HiddenFor(model => model.Questions[i].Id)
                        <div class="form-check">
                            @Html.CustomCheckBoxFor(model => model.Questions[i].IsChecked, new { @class = "form-check-input" }, false)&nbsp;&nbsp;@string.Format(Model.Questions[i].Question, employeeName)
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-dsquared" data-dismiss="modal">Close</button>
                    <a data-toggle="modal" href="#saveModal" class="btn btn-dsquared" data-dismiss="modal">Continue to: Save</a>
                </div>
            </div>
        </div>
    </div>
    // PCI Sub-module Submit modal
    <div class="modal fade" id="PCISubModuleSubmitModal" tabindex="-1" role="dialog" aria-labelledby="PCISubModuleSubmitModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title">@employeeName, Please validate that you have inspected all of your restaurants installed EMV readers for Restaurant: @Model.SelectedLocation</h4>
                </div>
                <div class="modal-body" style="font-size:18px">
                    @for (int i = 0; i < Model.Questions.Count(); i++)
                    {
                        @Html.HiddenFor(model => model.Questions[i].Id)
                        @Html.HiddenFor(model => model.Questions[i].Question)
                        <div class="form-check">
                            @Html.CustomCheckBoxFor(model => model.Questions[i].IsChecked, new { @class = "form-check-input" }, false)&nbsp;&nbsp;@string.Format(Model.Questions[i].Question, employeeName)
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-dsquared" data-dismiss="modal">Close</button>
                    <a data-toggle="modal" href="#submitModal" class="btn btn-dsquared" data-dismiss="modal">Continue to:<br />Save and Email RM</a>
                </div>
            </div>
        </div>
    </div>
    //save modal
    <div class="modal fade" id="saveModal" tabindex="-1" role="dialog" aria-labelledby="saveModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title">Are you sure you want to apply these changes?</h4>
                </div>
                <div class="modal-body text-center" style="font-size:18px">
                    @Model.EmployeeInfo.FirstName @Model.EmployeeInfo.LastName, you are saving this for Restaurant:
                    <br />
                    <strong style="font-size:32px"><u>@Model.SelectedLocation</u></strong>
                    <br />
                    <br />
                    <br />
                    If this is not accurate, please contact the IT Service Desk at <br /> 407-581-3366 or by clicking on this link: <a href="@Model.TicketURL">Submit an IT Support Request</a>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <input type="submit" value="Save" name="action:EntrySave" class="btn btn-dsquared" />
                </div>
            </div>
        </div>
    </div>

    //submit modal
    <div class="modal fade" id="submitModal" tabindex="-1" role="dialog" aria-labelledby="submitModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title">Are you sure you want to apply these changes?</h4>
                </div>
                <div class="modal-body text-center" style="font-size:18px">
                    @Model.EmployeeInfo.FirstName @Model.EmployeeInfo.LastName, you are submitting this for Restaurant:
                    <br />
                    <strong style="font-size:32px"><u>@Model.SelectedLocation</u></strong>
                    <br />
                    <br />
                    <br />
                    If this is not accurate, please contact the IT Service Desk at <br /> 407-581-3366 or by clicking on this link: <a href="@Model.TicketURL">Submit an IT Support Request</a>
                    <br />
                    <br />
                    <strong style="font-size:24px"><u>**WARNING**</u></strong>
                    <br />
                    This submission will make this record read only and send a confirmation email. Please make sure all values are correct before proceeding with the submission.
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <input type="submit" value="Save and Email RM" name="action:EntrySubmit" class="btn btn-dsquared" />
                </div>
            </div>
        </div>
    </div>
}

<!--competitive event create holder-->
<div id="createPartial">
</div>

<!--last year redbook detail holder-->
<div id="detailPartial">
</div>

<!--sales forecast detail holder-->
<div id="salesForecastDetailPartial">
</div>

<!--sales data detail holder-->
<div id="salesDataDetailPartial">
</div>

<!--must explicitly define the controller and action and pageHeaderKey. PageHeaderKey can be found in HelpDocument.cs-->
@{Html.RenderAction("ModalDetails", "Home", new { @controller = "Redbook", @action = "Entry", @pageHeaderKey = "RedbookEntry" });}